# =========================================================
# Production-Ready Docker Compose Configuration
# Migration-First Schema Consistency System
# =========================================================

version: '3.8'

networks:
  msa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  auth_db_data:
  redis_data:
  traefik_data:

services:
  # =====================================
  # API Gateway & Load Balancer
  # =====================================
  traefik:
    image: traefik:3.0
    container_name: api-gateway
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --log.level=INFO
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=msa-network
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      msa-network:
        ipv4_address: 172.20.0.10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # MIGRATION-FIRST DATABASE
  # =====================================
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    restart: unless-stopped
    networks:
      msa-network:
        ipv4_address: 172.20.0.20
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME:-auth_db}
      POSTGRES_USER: ${AUTH_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      # Migration-First initialization
      - ./services/auth-service/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./scripts/docker/migration-runner.sh:/docker-entrypoint-initdb.d/01-migration-runner.sh:ro
      - ./scripts/docker/post-migration-validation.sh:/docker-entrypoint-initdb.d/02-validation.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: |
        pg_isready -U ${AUTH_DB_USER:-postgres} -d ${AUTH_DB_NAME:-auth_db} &&
        psql -U ${AUTH_DB_USER:-postgres} -d ${AUTH_DB_NAME:-auth_db} -c "SELECT COUNT(*) FROM schema_migrations;" > /dev/null
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  # =====================================
  # AUTHENTICATION SERVICE
  # =====================================
  auth-service:
    build: 
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    container_name: auth-service
    restart: unless-stopped
    networks:
      msa-network:
        ipv4_address: 172.20.1.1
    environment:
      # Database Configuration
      - AUTH_DB_HOST=postgres-auth
      - AUTH_DB_PORT=5432
      - AUTH_DB_NAME=auth_db
      - AUTH_DB_USER=postgres
      - AUTH_DB_PASSWORD=testpassword
      # Redis Configuration
      - REDIS_URL=redis://redis-cache:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      # JWT Configuration
      - JWT_ACCESS_SECRET=production-access-secret-key-minimum-32-characters-long-change-this
      - JWT_REFRESH_SECRET=production-refresh-secret-key-minimum-32-characters-long-change-this
      - JWT_ISSUER=auth-service
      # Server Configuration
      - HTTP_PORT=8001
      - GRPC_PORT=9001
      # Security Configuration
      - BCRYPT_COST=12
      # OAuth2 Configuration (disabled)
      - OAUTH2_GOOGLE_ENABLED=false
      - OAUTH2_GITHUB_ENABLED=false
      - OAUTH2_FACEBOOK_ENABLED=false
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://172.20.1.10
    ports:
      - "8001:8001"
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/v1/auth`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.services.auth.loadbalancer.server.port=8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # CACHE LAYER
  # =====================================
  redis-cache:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    networks:
      msa-network:
        ipv4_address: 172.20.0.30
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =====================================
  # FRONTEND APPLICATION
  # =====================================
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: frontend-app
    restart: unless-stopped
    networks:
      msa-network:
        ipv4_address: 172.20.1.10
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://172.20.0.10
      - NEXT_PUBLIC_AUTH_API_URL=http://172.20.0.10/api/v1/auth
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    depends_on:
      - auth-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =====================================
# USAGE EXAMPLES
# =====================================
#
# Production deployment:
#   docker-compose up -d
#
# Development with testing:
#   docker-compose -f docker/docker-compose.migration-test.yml up -d
#
# Full monitoring setup:
#   docker-compose -f docker/docker-compose.migration-first.yml up -d